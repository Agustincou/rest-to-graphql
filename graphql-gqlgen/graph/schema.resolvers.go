package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.55

import (
	"context"
	"errors"
	"rest-to-graphql/graphql-gqlgen/database"
	"rest-to-graphql/graphql-gqlgen/graph/model"
	"strconv"
)

// CreateItem is the resolver for the CreateItem field.
func (r *mutationResolver) CreateItem(ctx context.Context, name string, value string) (*model.Item, error) {
	item := &model.Item{
		ID:    strconv.Itoa(database.NextID),
		Name:  name,
		Value: value,
	}

	database.Items[database.NextID] = item

	database.NextID++

	return item, nil
}

// UpdateItem is the resolver for the UpdateItem field.
func (r *mutationResolver) UpdateItem(ctx context.Context, id string, name string, value string) (*model.Item, error) {
	intID, err := strconv.Atoi(id)
	if err != nil || database.Items[intID] == nil {
		return nil, errors.New("item not found")
	}

	database.Items[intID].Name = name
	database.Items[intID].Value = value

	return database.Items[intID], nil
}

// GetItems is the resolver for the GetItems field.
func (r *queryResolver) GetItems(ctx context.Context) ([]*model.Item, error) {
	var result []*model.Item
	for _, item := range database.Items {
		result = append(result, item)
	}

	return result, nil
}

// GetItem is the resolver for the GetItem field.
func (r *queryResolver) GetItem(ctx context.Context, id string) (*model.Item, error) {
	intID, err := strconv.Atoi(id)
	if err != nil || database.Items[intID] == nil {
		return nil, errors.New("item not found")
	}

	return database.Items[intID], nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
